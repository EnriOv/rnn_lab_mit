{"version":3,"sources":["components/SongInfo.js","components/Generator.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["SongInfo","props","song","useState","notes","setNotes","abc","useEffect","split","abcjs","renderAbc","responsive","renderMidi","midi","setLoop","document","querySelector","className","id","Generator","setSong","model","setModel","char2idx","setChar2idx","vocab","url","a","tf","console","log","objectMapping","then","loadModel","entries","index","onClick","start_string","gen_text","input_eval","map","letter","counter","predictions","predict","predicted_id","values","dataSync","Array","from","push","join","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.62e6d96c.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport 'abcjs/abcjs-midi.css';\r\nimport abcjs from 'abcjs/midi';\r\n\r\nconst SongInfo = (props) => {\r\n    const { song } = props;\r\n\r\n    const [notes, setNotes] = useState('');\r\n\r\n    var abc = \"T:Huwckartye\\n\"\r\n            + \"Z: id:dc-jig-122\\n\"\r\n            + \"M:6/8\\n\"\r\n            + \"L:1/8\\n\"\r\n            + \"K:F Minor\\n\"\r\n            + \"ABd egd|BAd AFA|B2e e2d|BdB e3|!\\n\"\r\n            + \"bag agf|edB B2d|efg edB|AGEA GEDa|!\\n\"\r\n            + \"g2fg ebab|gdfA d2ed|cAeB AFEG|Aed^c d3:|!\\n\"\r\n            + \"BdB|eAA2 BAGA|B2dB GBdB|cABG AGEG|BAGF D2:|!\\n\";\r\n\r\n    useEffect(() => {\r\n        if(song) {\r\n            abc = \"X:\" + song.split('X:')[1];\r\n        }\r\n\r\n        /* Draw the music - this supplies an object that has a lot of information about \r\n           how to create the synth. */\r\n        const visualObj = abcjs.renderAbc('paper', abc, {responsive: 'resize' })[0];\r\n        \r\n        abcjs.renderMidi('media-player', abc, { });\r\n\r\n        abcjs.midi.setLoop(document.querySelector('.abcjs-inline-midi'), true);\r\n\r\n        setNotes(abc)\r\n    }, [song])\r\n\r\n    return (\r\n        <>\r\n            <div className='player'>\r\n                <div id='media-player'>Media Player</div>\r\n            </div>\r\n            <div className='song-abc'>\r\n                {notes}\r\n            </div>\r\n            <div>\r\n                <div id='paper'></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SongInfo\r\n","import { useState, useEffect } from 'react' \r\nimport SongInfo from \"./SongInfo\"\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\nconst Generator = () => {\r\n    const [song, setSong] = useState('');\r\n    const [model, setModel] = useState(null);\r\n    const [char2idx, setChar2idx] = useState({})\r\n\r\n    const vocab = ['\\n', ' ', '!', '\"', '#', '\\'', '(', ')', ',', '-', '.', '/', '0', '1',\r\n    '2', '3', '4', '5', '6', '7', '8', '9', ':', '<', '=', '>', 'A', 'B', 'C', 'D', 'E', 'F',\r\n    'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\r\n    'Y', 'Z', '[', ']', '^', '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\r\n    'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '|'];\r\n\r\n    const url = {\r\n        model: 'https://irish-song-rnn-model-bucket.s3-us-west-1.amazonaws.com/irish_rnn/model.json',\r\n    };\r\n\r\n    async function loadModel(url) {\r\n        try {\r\n            const model = await tf.loadLayersModel(url.model);\r\n\r\n            setModel(model);\r\n            console.log(\"Load model success\");\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const onGenerateSong = () => {\r\n        const length = 500;\r\n        const start_string = \"X:1\\nT:\";\r\n\r\n        if(model) {\r\n            var gen_text = [];\r\n\r\n            /* Convert the start string to numbers (vectorize) */\r\n            var input_eval = start_string.split('').map(letter => {return char2idx[letter]});\r\n\r\n            input_eval = tf.expandDims(input_eval, 0);\r\n            \r\n            for(var counter = 0; counter < length; counter++) {\r\n                /* Evaluate the inputs and generate the next character predictions */\r\n                var predictions = model.predict(input_eval);\r\n\r\n                /* Remove the batch dimension */\r\n                predictions = tf.squeeze(predictions, 0);\r\n\r\n                /* Use a multinomial distribution to sample */\r\n                var predicted_id = tf.multinomial(predictions, 1)\r\n\r\n                const values = predicted_id.dataSync();\r\n                const arr = Array.from(values);\r\n                predicted_id = arr[0];\r\n                \r\n                /* Pass the prediction along with the previous hidden state \r\n                   as the next inputs to the model */\r\n                input_eval = tf.expandDims([predicted_id], 0);\r\n\r\n                /* Add the predicted character to the generated text! */\r\n                gen_text.push(vocab[predicted_id]);\r\n            }\r\n\r\n            setSong(start_string + gen_text.join(''));\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const objectMapping = {};\r\n\r\n        tf.ready().then(()=>{\r\n            loadModel(url);\r\n        });\r\n\r\n        for(const [index, element] of vocab.entries()) {\r\n            objectMapping[element] = index;\r\n        }\r\n\r\n        setChar2idx(objectMapping);\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className='generator-container'>\r\n                <p>\r\n                    This irish song generator was developed using a deep recurrent neural network. \r\n                    It was trained using a dataset containing various irish songs in abc notation. \r\n                    This project was created as a lab assignment from the MIT course:\r\n                </p>\r\n                <br/>\r\n                <p>\r\n                    Â© Alexander Amini and Ava Soleimany<br/>\r\n                    MIT 6.S191: Introduction to Deep Learning<br/>\r\n                    IntroToDeepLearning.com\r\n                </p>\r\n                <div className='generate-btn-container'>\r\n                    <button className='btn generate-btn' onClick={onGenerateSong}>GENERATE SONG</button>\r\n                </div>\r\n            </div>\r\n            <SongInfo song={song}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Generator\r\n","const Header = () => {\r\n    return (\r\n        <header>\r\n            <h1 className=\"title\">Irish Song Generator</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import Generator from './components/Generator'\r\nimport Header from './components/Header'\r\nimport SongInfo from './components/SongInfo'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Generator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}